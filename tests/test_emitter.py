"""Tests for LangGraph emitter functionality."""

import tempfile
from pathlib import Path

import pytest

from stanzaflow.adapters.langgraph.emit import LangGraphEmitter


class TestLangGraphEmitter:
    """Test suite for LangGraph emitter."""

    def test_sanitize_name_valid_names(self):
        """Test that valid names are not unnecessarily modified."""
        emitter = LangGraphEmitter()

        # Valid names should not get leading underscores
        assert emitter._sanitize_name("Bot") == "bot"
        assert emitter._sanitize_name("Agent") == "agent"
        assert emitter._sanitize_name("ValidName") == "validname"
        assert emitter._sanitize_name("_private") == "_private"

    def test_sanitize_name_invalid_start(self):
        """Test that names starting with numbers get descriptive prefix."""
        emitter = LangGraphEmitter()

        assert emitter._sanitize_name("123Bot") == "item_123bot"
        assert emitter._sanitize_name("9Agent") == "item_9agent"
        assert emitter._sanitize_name("123Bot", "agent") == "agent_123bot"

    def test_sanitize_name_special_chars(self):
        """Test that special characters are replaced with underscores."""
        emitter = LangGraphEmitter()

        assert emitter._sanitize_name("Bot-Agent") == "bot_agent"
        assert emitter._sanitize_name("Data@Processor") == "data_processor"
        assert emitter._sanitize_name("File.Handler") == "file_handler"
        assert emitter._sanitize_name("Multi Word Agent") == "multi_word_agent"

    def test_sanitize_name_mixed_cases(self):
        """Test complex sanitization cases."""
        emitter = LangGraphEmitter()

        # Should not add underscore for valid start after substitution
        assert emitter._sanitize_name("Bot-123") == "bot_123"
        # Should add descriptive prefix for invalid start after substitization
        assert emitter._sanitize_name("@Bot") == "item_bot"
        assert emitter._sanitize_name("$123Agent", "agent") == "agent_123agent"
        assert emitter._sanitize_name("123Bot", "agent") == "agent_123bot"

    def test_sanitize_name_dunder_methods(self):
        """Test that dunder methods don't get extra underscores."""
        emitter = LangGraphEmitter()

        # These should preserve their structure without extra underscores
        assert emitter._sanitize_name("__init__") == "__init__"
        assert emitter._sanitize_name("__call__") == "__call__"
        assert emitter._sanitize_name("_private") == "_private"

    def test_emit_basic_workflow(self):
        """Test emitting a basic workflow."""
        emitter = LangGraphEmitter()
        ir = {
            "ir_version": "0.2",
            "workflow": {
                "title": "Test Workflow",
                "agents": [
                    {
                        "name": "TestAgent",
                        "steps": [
                            {"name": "TestStep", "attributes": {"artifact": "test.txt"}}
                        ],
                    }
                ],
            },
        }

        with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as f:
            output_path = Path(f.name)

        try:
            emitter.emit(ir, output_path)

            # Check that file was created and contains expected content
            assert output_path.exists()
            content = output_path.read_text()

            # Basic structure checks
            assert "MIT License" in content
            assert "Generated by StanzaFlow" in content
            assert "def testagent_agent(state: WorkflowState)" in content
            assert "def create_workflow()" in content
            assert 'state["artifacts"]["test.txt"]' in content

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_emit_unsupported_version(self):
        """Test that unsupported IR version raises error."""
        emitter = LangGraphEmitter()
        ir = {"ir_version": "0.1", "workflow": {"title": "Test Workflow", "agents": []}}

        with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as f:
            output_path = Path(f.name)

        try:
            from stanzaflow.core.exceptions import CompileError

            with pytest.raises(CompileError, match="Unsupported IR version"):
                emitter.emit(ir, output_path)
        finally:
            if output_path.exists():
                output_path.unlink()

    def test_emit_todo_tagging(self):
        """Test that unsupported attributes generate TODO comments."""
        emitter = LangGraphEmitter()
        ir = {
            "ir_version": "0.2",
            "workflow": {
                "title": "Test Workflow",
                "agents": [
                    {
                        "name": "TestAgent",
                        "steps": [
                            {
                                "name": "TestStep",
                                "attributes": {
                                    "retry": 3,
                                    "timeout": 30,
                                    "unsupported_attr": "value",  # This should generate TODO
                                },
                            }
                        ],
                    }
                ],
            },
        }

        with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as f:
            output_path = Path(f.name)

        try:
            emitter.emit(ir, output_path)
            content = output_path.read_text()

            # Check that retry and timeout are implemented (not TODO)
            assert "# Retry logic for TestStep" in content
            assert "max_retries = 3" in content
            assert "# Timeout handling for TestStep" in content
            assert "signal.alarm(30)" in content
            
            # Check that unsupported attributes generate TODO comments
            assert "# TODO[escape]: Unsupported attributes â†’ unsupported_attr" in content

        finally:
            output_path.unlink()
