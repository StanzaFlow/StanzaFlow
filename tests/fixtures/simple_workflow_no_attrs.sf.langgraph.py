# Generated by StanzaFlow
# MIT License

import os
from typing import Dict, Any
from langgraph.graph import StateGraph, END

# State definition
class WorkflowState(Dict[str, Any]):
    """State for the workflow."""
    artifacts: Dict[str, str] = {}

def bot_agent(state: WorkflowState) -> WorkflowState:
    """Execute Bot agent steps."""
    print(f"Executing Bot agent")
    
    # Step: Hello
    print(f"  - Hello")
    
    # Step: Process data
    print(f"  - Process data")
    
    return state

def human_agent(state: WorkflowState) -> WorkflowState:
    """Execute Human agent steps."""
    print(f"Executing Human agent")
    
    # Step: Review results
    print(f"  - Review results")
    
    return state

def create_workflow() -> StateGraph:
    """Create the Workflow: Simple Test workflow graph."""
    graph = StateGraph(WorkflowState)
    
    graph.add_node("bot", bot_agent)
    graph.add_node("human", human_agent)
    
    # Sequential workflow
    graph.add_edge("bot", "human")
    
    graph.set_entry_point("bot")
    graph.add_edge("human", END)
    
    return graph.compile()


if __name__ == "__main__":
    workflow = create_workflow()
    initial_state = {"data": {}, "artifacts": {}}
    result = workflow.invoke(initial_state)
    print(f"Workflow Workflow: Simple Test completed: {result}")