[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stanzaflow"
version = "0.0.2"
description = "Flow-first AI workflow compiler"
readme = "README.md"
license = "MIT"
authors = [
    { name = "StanzaFlow Contributors" },
]
keywords = ["ai", "workflow", "compiler", "langgraph"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "lark>=1.1.5",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "jsonschema>=4.0.0",
    "platformdirs>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/stanzaflow/stanzaflow"
Repository = "https://github.com/stanzaflow/stanzaflow"
Issues = "https://github.com/stanzaflow/stanzaflow/issues"

[project.scripts]
stanzaflow = "stanzaflow.cli.main:app"
stz = "stanzaflow.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["stanzaflow"]

[tool.hatch.build.targets.wheel.sources]
"stanzaflow" = "stanzaflow"

[tool.hatch.build.targets.sdist]
include = [
    "/stanzaflow",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Ensure package data is included
[tool.hatch.build.targets.wheel.shared-data]
"stanzaflow/schemas" = "stanzaflow/schemas"
"stanzaflow/core/stz_grammar.lark" = "stanzaflow/core/stz_grammar.lark"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
preview = false
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "W"]
ignore = ["E501"]  # Line length handled by black

[tool.ruff.lint.isort]
known-first-party = ["stanzaflow"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=stanzaflow",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]

[tool.coverage.run]
source = ["stanzaflow"]
omit = [
    "tests/*",
    "stanzaflow/cli/*",
    "stanzaflow/tools/*",
    "stanzaflow/adapters/*",
    "stanzaflow/core/exceptions.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

 